// src/services/userApi.js
const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL ?? 'https://api.desenrola.shop/api';

/**
 * Registra um novo usu√°rio na API.
 * A fun√ß√£o envia os dados do usu√°rio como par√¢metros de query string em uma requisi√ß√£o POST.
 * @param {object} userData - Objeto contendo os dados para o registro.
 * @param {string} userData.userName - O nome de usu√°rio escolhido.
 * @param {string} userData.name - O nome completo do usu√°rio.
 * @param {string} userData.email - O endere√ßo de e-mail do usu√°rio.
 * @param {string} userData.phone - O telefone do usu√°rio (opcional).
 * @param {string} userData.password - A senha para a nova conta.
 * @param {string} userData.passwordConfirmation - A confirma√ß√£o da senha, que deve ser id√™ntica √† senha.
 * @param {number} userData.role - O papel do usu√°rio (1 = Customer, 0 = Admin, 2 = Provider).
 * @returns {Promise<boolean>} Uma promessa que resolve para `true` se o registro for bem-sucedido.
 * @throws {Error} Lan√ßa um erro se a resposta da API n√£o for bem-sucedida (status HTTP n√£o-2xx), 
 * contendo o texto da resposta ou uma mensagem de falha padr√£o.
 */
export async function registerUser({ userName, name, email, phone, password, passwordConfirmation, role }) {
  // Monta a querystring conforme a API
  const params = new URLSearchParams({
    UserName: userName,
    Name: name,
    Email: email,
    Password: password,
    PasswordConfirmation: passwordConfirmation,
    Role: role, // üëà agora aceita o valor num√©rico do enum
  });

  // Adiciona phone apenas se fornecido
  if (phone) {
    params.append('Phone', phone);
  }

  const url = `${BASE_URL}/user?${params.toString()}`;

  // Geralmente o registro √© feito com POST
  const res = await fetch(url, {
    method: 'POST',
    // Se a API exigir JSON, o corpo (body) da requisi√ß√£o deveria ser usado.
    // headers: { 'Content-Type': 'application/json' },
    // body: JSON.stringify({ ... })
  });

  // Trata respostas n√£o-2xx
  if (!res.ok) {
    const text = await res.text().catch(() => '');
    throw new Error(text || `Falha no registro (HTTP ${res.status})`);
  }

  // Se a API retorna dados √∫teis em JSON, o retorno seria:
  // return await res.json();

  // Se n√£o retorna nada relevante, um sucesso booleano √© suficiente.
  return true;
}